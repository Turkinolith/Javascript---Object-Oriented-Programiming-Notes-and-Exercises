// *** Prototypical Inheritance - 04 - Intermediate Function Inheritance ***

// Now that we've set up the inheritance chain properly, lets create another object, a square that inherits from the shape.
/* 
function Shape(color) {
  this.color = color;
}

Shape.prototype.duplicate = function() {
  console.log('duplicate');
}

function Circle(radius, color) {
  Shape.call(this, color);  // Fixed code.
  this.radius = radius;
}
Circle.prototype = Object.create(Shape.prototype);
Circle.prototype.constructor = Circle;

Circle.prototype.draw = function() {
  console.log('draw');
}

function Square(size) {
  this.size = size;
}
Square.prototype = Object.create(Shape.prototype);
Square.prototype.constructor = Square;


const c1 = new Circle(1, 'red');
const sq = new Square(10);
 */
// This works, but the 2 lines of code for defining the prototype chain (Circle.prototype - Object.create, Circle.prototpye.constructor, etc.) 
// are a bit noisy and as we define multiple objects the code gets in the way and we might make a mistake along the way.

// Lets refactor the prototype chain code into a function that can be reused!

/*
function extend(Child, Parent) {   // Note that the first letter of the 2 parameters are upper case, because I expect them to be Constructor Functions.
  Child.prototype = Object.create(Parent.prototype);
  Child.prototype.constructor = Child;
}
*/

// Now this logic is encapsulated. lets put it together with the above code, lets place it above the constructors and call the new functions after
// each constructor.

function Shape(color) {
  this.color = color;
}

Shape.prototype.duplicate = function() {
  console.log('duplicate');
}
// ******************* NEW CODE HERE **************
function extend(Child, Parent) {
  Child.prototype = Object.create(Parent.prototype);
  Child.prototype.constructor = Child;
}

function Circle(radius, color) {
  Shape.call(this, color);  // Fixed code.
  this.radius = radius;
}
// ***************** NEW CODE HERE *************
extend(Circle, Shape);

Circle.prototype.draw = function() {
  console.log('draw');
}

function Square(size) {
  this.size = size;
}
// ******************** NEW CODE HERE **********
extend(Square, Shape);

const c1 = new Circle(1, 'red');
const sq = new Square(10);
// Verify: sq.duplicate();  returns - 'duplicate' so it is inheriting properly.
